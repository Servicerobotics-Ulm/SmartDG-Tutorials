1
00:00:09,467 --> 00:00:48,506
Import any SmartDG Tier-2 Environment model.

2
00:00:49,428 --> 00:00:54,268
Tier-2 Environment model being compiled and built.

3
00:00:56,068 --> 00:00:59,650
SmartDGbox folder appeared at SMART_ROOT_ACE if not already present.

4
00:00:59,650 --> 00:01:08,547
The newly imported Tier-2 Environment is generated/re-generated here.

5
00:01:08,547 --> 00:01:23,630
Several Tier-2 Environment models can be imported in SMART_ROOT_ACE.

6
00:01:23,630 --> 00:01:27,119
Once Imported, the Tier-2 Environment project can be closed.

7
00:01:27,183 --> 00:01:34,067
Find the approved transfer functions in SmartDG-Models released with the Tier-2 Environment.

8
00:01:34,367 --> 00:01:39,936
The src-gen folder of the built Tier-2 Environment is not to be disturbed.

9
00:01:39,936 --> 00:01:46,193
Paste the component and connector transfer functions in the src folder of the built Tier-2 Environment.

10
00:01:46,293 --> 00:01:55,293
Import any SmartDG Service model in the workspace.

11
00:02:18,896 --> 00:02:18,000


12
00:02:26,563 --> 00:02:32,252
In an existing SmartMDSD component project.

13
00:02:32,462 --> 00:02:47,367
Add Dependency Object instances to Input/Output ports.

14
00:02:48,367 --> 00:02:58,682
Dependency objects associated with a port are visible in their properties.

15
00:03:02,465 --> 00:03:18,905
Add a new SmartDG model to the component project.

16
00:03:19,365 --> 00:03:22,911
The "do" (Dependency Object) and "de" (Tier-3 dependency environment) models will be generated. The "de" model is empty by default.

17
00:03:23,411 --> 00:03:50,168
The "do" default model will import the Tier-2 Dependency base environment from SMART_ROOT_ACE and generate a Tier-3 User Environment model at HOME.

18
00:03:50,668 --> 00:03:55,668
SmartDG source code and the corresponding executable is generated at the HOME location.

19
00:03:56,168 --> 00:04:13,168
The SmartDG execution can be launched from the command line.

20
00:04:13,668 --> 00:04:18,168
Unless provided by the Tier-2 Environment, generic transfer functions are generated for the component.

21
00:04:18,668 --> 00:04:27,668
Correct forward and reverse business logic can be deployed by editing these generic transfer functions.

22
00:04:29,668 --> 00:04:45,668
Transfer functions for the component "TwoMapMaker" for instance are provided by the Tier-2 Dependency base environment.

23
00:04:46,668 --> 00:05:14,468
The SmartDG execution for a component is useful for component manufacturers and system designers during component and system development respectively.

24
00:05:15,468 --> 00:05:36,468
The SmartDG execution demonstrates the implications of transfer functions on all dependency objects associated with input and output ports.

25
00:05:37,468 --> 00:06:02,768
Transfer functions for the component "TwoMapMaker" are imported from the Tier-2 Dependency base environment.

26
00:06:04,268 --> 00:06:20,068
Transfer functions for the component "OneUser" are generic and will remain so unless modified by the user.

27
00:06:21,568 --> 00:06:34,368
In SmartDG execution for component models, any change in dependency objects associated with output ports triggers the inverse transfer function (FT).

28
00:06:34,868 --> 00:06:47,368
This simulates a change in dependency objects associated with output ports in a direction opposite to the natural (Output port to Input port) flow of service data between two components.

29
00:06:48,368 --> 00:07:11,168
By switching the business direction, values of input ports can be changed to trigger the forward transfer function (TF).

30
00:07:17,000 --> 00:07:29,000
In an existing SmartMDSD system project.

31
00:07:30,000 --> 00:07:51,000
Component instances that are of components with the existing SmartDG component models.

32
00:07:52,000 --> 00:08:07,000
Add a new SmartDG model to the component project.

33
00:08:08,000 --> 00:08:24,000
The "dg" (Dependency Graph) and "de" (Tier-3 dependency environment) models will be generated. The "de" model is empty by default.

34
00:08:25,000 --> 00:08:31,000
The "dg" default model will import the Tier-2 Dependency base environment from SMART_ROOT_ACE and make a Tier-3 User Environment model at HOME after it is built.

35
00:08:32,000 --> 00:08:39,000
SmartDG source code and the corresponding executable is generated at the HOME location. It is possible to replace HOME with a user-defined file path in the model.

36
00:08:40,000 --> 00:08:51,000
"Unnamed" connectors and random placements for components in GUI are generated by the default "dg" model.

37
00:08:52,000 --> 00:09:01,000
Connectors (CS05, DF etc.) from the Tier-2 Environment model can be specified for specific Dependency connections.

38
00:09:02,000 --> 00:09:11,100
Specifying the placement of components in the GUI is essential for a clean SmartDG execution GUI.

39
00:09:12,000 --> 00:09:21,000
SmartDG models (source code and executables) are regenerated after every change in the model files.

40
00:09:22,000 --> 00:09:31,000
The latest SmartDG component and system executables are copied into the SmartDG_Assortment folder for easy one-place access.

41
00:09:32,000 --> 00:09:41,000
The SmartDG execution for the system model can be launched from the command line.

42
00:09:42,000 --> 00:09:51,000
Interlinked windows are generated for "Component Views" and "Dependency Object" views.

43
00:09:52,000 --> 00:10:01,000
"Component Views" are specific to a component's activity while the "Dependency Object" represents the system-wide activity of a particular Dependency Object.

44
00:10:02,000 --> 00:10:14,000
Changes in dependency objects across views are available for standalone (detached) or synced (attached) observation modes.

45
00:10:15,000 --> 00:10:23,000
The additional Download and Upload options give the user control over when to display the results of the most recent inward or outward Sync.

46
00:10:24,000 --> 00:10:31,000
In addition to the above views, an additional system-wide multi-view representation (SmartDG Lite Mode) is generated by SmartDG.

47
00:10:32,000 --> 00:10:41,000
At present, the web-browser-based "SmartDG Lite Mode" is only available to observe (and not edit) the dependency object associations. This mode will be more functional in future releases.

48
00:10:42,000 --> 00:10:51,000
A SmartDG execution for a system model generates a folder named "SmartDGlite" in the directory of the executable file.

49
00:10:52,000 --> 00:11:01,000
To use the "SmartDG Lite Mode", Execute the "LaunchServer.sh" script from another terminal window. This is to launch the data-sync server.

50
00:11:02,000 --> 00:11:19,000
Note that this step is NOT REQUIRED to run the SmartDG system execution model in "General Mode". The user can avoid the steps given hereafter if "SmartDG Lite Mode" is not required.

51
00:11:20,000 --> 00:11:29,000
The Data-sync server launch is confirmed by the automatic launch of the browser window.

52
00:11:30,000 --> 00:11:37,000
The "SmartDG Lite Mode" can be launched by opening the "DGlite.html" file in any browser.

53
00:11:38,000 --> 00:11:47,000
An animated "Live" dot indicates that the "SmartDG Lite Mode" is synced with the General SmartDG system execution model.

54
00:11:48,000 --> 00:11:57,000
"SmartDG Lite Mode" provides greater functionality in terms of handling and observing the components and individual dependency links.

55
00:11:58,000 --> 00:12:47,000
Changes made in any of the General SmartDG component or dependency object views are reflected immediately in "SmartDG Lite Mode".

56
00:12:48,000 --> 00:12:57,000
"SmartDG Lite Mode" is in the experimental stage. Plans to make this the principal GUI are in the pipeline.

57
00:12:58,000 --> 00:13:14,150
Functionality to add/delete dependencies and change the values of dependency object instances in "SmartDG Lite Mode" is imagined as a future possibility.

